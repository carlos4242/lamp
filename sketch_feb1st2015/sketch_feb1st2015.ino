//

#include <SPI.h>
#include <Ethernet.h>
#include <avr/wdt.h>

int lightOne =  7;    // relay connected to digital pin 7
int lightTwo = 6;

// change 1
int overrideSwitch = 5;
int pilotLight = 4;

int inverseLightThree = 3;

int beedoBeedo = 2;

int incomingByte = 0;	// for incoming serial data

int lightOneState = LOW;
int lightTwoState = LOW;
int inverseLightThreeState = HIGH;
int beedoBeedoState = LOW;

boolean debug = false;

// The setup() method runs once, when the sketch starts

// assign a MAC address for the ethernet controller.
// fill in your address here:
byte mac[] = {
  0x90,0xA2,0xDA,0x0D,0x9C,0x31};
// assign an IP address for the controller:
IPAddress ip(10,0,1,160);//10.0.1.1
IPAddress gateway(10,0,1,2);
IPAddress subnet(255, 255, 255, 0);

byte favicon[] = {
  0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,
  0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x08,0x02,0x00,0x00,0x00,0x90,0x91,0x68,
  0x36,0x00,0x00,0x02,0x42,0x49,0x44,0x41,0x54,0x28,0xcf,0x6d,0x92,0xcf,0x4f,0x13,
  0x51,0x10,0xc7,0x67,0xde,0x7b,0xbb,0x4b,0x29,0xed,0x86,0x72,0x90,0xd8,0x4a,0x2d,
  0xa8,0x34,0x8a,0x0a,0x22,0x31,0x92,0x78,0x21,0x31,0x46,0x12,0x7f,0x10,0x62,0xf4,
  0xe0,0xd1,0x8b,0xff,0x81,0x57,0x2f,0x26,0x5e,0xf4,0xe2,0xd1,0x8b,0x07,0x35,0x91,
  0xc4,0x68,0xf0,0x22,0x37,0x54,0x44,0x94,0x94,0x84,0x08,0x6a,0x8c,0x42,0x20,0x56,
  0x5b,0x59,0xba,0xb6,0x6c,0xa5,0xbb,0xef,0xbd,0xf1,0x50,0x68,0x4b,0xe2,0x37,0x73,
  0x9a,0x99,0x6f,0x26,0x33,0xf3,0xc1,0x4c,0xd6,0x85,0x6d,0x21,0x00,0x21,0x68,0xa5,
  0xb5,0x56,0x8c,0x40,0x03,0x01,0xa1,0x30,0x4d,0x00,0xaa,0xf5,0x08,0x68,0x10,0x01,
  0x70,0xe4,0xdf,0xbe,0x2e,0x4a,0x5f,0x9a,0xa1,0x10,0x00,0xb9,0xce,0xda,0xde,0x54,
  0x57,0x6b,0x7b,0x3b,0x68,0xfa,0x8f,0x01,0x11,0x73,0xbf,0xb2,0x65,0xcf,0x3b,0x7c,
  0x6c,0x80,0x71,0x8e,0x00,0x52,0xaa,0x97,0xcf,0x9e,0x0c,0x8f,0x5e,0xd1,0xdb,0x43,
  0x58,0xa3,0x41,0xca,0x60,0xe9,0xf3,0xa7,0xf8,0x9e,0x24,0x00,0x68,0xa5,0x94,0x52,
  0xc8,0x71,0xe8,0xcc,0xb9,0xb1,0x07,0xf7,0x43,0xa1,0xf0,0x0e,0x03,0x02,0x20,0xe3,
  0xb9,0xd5,0x95,0xd2,0x46,0x69,0x57,0x22,0x51,0x9f,0xa9,0x29,0x14,0x89,0x74,0x75,
  0xa7,0x67,0xa7,0x26,0x39,0x17,0x0d,0x06,0xc6,0xbc,0xa2,0x3b,0x31,0xfe,0x7c,0x78,
  0xe4,0x92,0x96,0x9a,0x0b,0x51,0x0d,0x26,0x04,0x02,0xf4,0x9e,0x18,0x5c,0x5d,0xfe,
  0x5e,0x70,0xd6,0x10,0x11,0xab,0x57,0xe2,0x8c,0xdf,0xb9,0x79,0x63,0xe8,0xec,0x05,
  0x3b,0xd6,0xea,0x6f,0xfa,0x7f,0xcb,0x65,0x25,0x7d,0x22,0x30,0xad,0x26,0xd3,0x32,
  0x0d,0xcb,0xca,0x2e,0x2f,0x15,0x8b,0xee,0xe9,0xf3,0xa3,0xa2,0xba,0xab,0xe7,0x6d,
  0xec,0x4f,0xf7,0xcc,0x4e,0xbf,0xca,0xff,0xcc,0x3a,0xf9,0xdc,0xf1,0xc1,0x53,0xbb,
  0x3b,0x92,0x0c,0xd9,0xe4,0xc4,0x8b,0x8d,0x3f,0xc5,0x88,0x1d,0x8d,0xb6,0xb6,0xa5,
  0x0e,0x74,0x13,0x00,0x66,0xb2,0xae,0xd6,0x6a,0xb3,0xec,0x85,0xc3,0xd1,0x50,0x50,
  0xc9,0xe7,0x73,0xf3,0xd3,0x6f,0x07,0x2f,0x8e,0xf0,0xa6,0x66,0x26,0xf8,0xe2,0xdc,
  0x5c,0xb2,0x33,0xd5,0x62,0xc7,0x88,0x34,0x29,0x2d,0x95,0x14,0x08,0x18,0x54,0x82,
  0xa7,0x8f,0x1f,0x8e,0xf4,0xf5,0x27,0xee,0xdd,0x0e,0x1b,0xcd,0x9d,0xc5,0x82,0xf4,
  0x4a,0xce,0xb5,0xeb,0xcc,0x0f,0x12,0xa9,0xd4,0x97,0x85,0x8f,0xbd,0x03,0x27,0xb5,
  0x56,0x54,0xfb,0x43,0x4b,0x34,0x92,0xec,0xda,0x17,0xb1,0x6d,0x9e,0xcf,0xdb,0x9c,
  0xa3,0xef,0x17,0xa4,0xc4,0x6a,0x99,0x0b,0xa5,0x14,0x60,0xfd,0xd5,0x8c,0x80,0xd6,
  0xd7,0x1d,0x0a,0x02,0x27,0xd6,0xe6,0xdc,0xba,0x5b,0xb1,0x63,0x0b,0x3d,0xbd,0xbf,
  0x2f,0x5f,0x45,0xa9,0x10,0xf9,0x8f,0xd5,0x95,0x78,0x47,0x07,0xe9,0x3a,0x1a,0x98,
  0xc9,0xba,0x88,0xc8,0x19,0x53,0x1a,0x08,0xc9,0x30,0xad,0xcc,0xbb,0xa9,0x74,0x3a,
  0x6d,0x34,0x85,0x85,0xe0,0x73,0x33,0xd3,0x07,0x8f,0x1c,0x15,0x86,0x49,0xb8,0x05,
  0x14,0x03,0x00,0x22,0x92,0x4a,0x03,0x29,0xd4,0x5a,0xfa,0x95,0x78,0x3c,0x31,0xf3,
  0xe6,0xf5,0x66,0xd9,0x73,0xd7,0x9d,0x92,0x5b,0x90,0x9a,0x08,0xea,0xf8,0xd5,0x58,
  0xa2,0xad,0x8c,0xd6,0xed,0xf1,0xc4,0xfc,0x87,0xf7,0xe3,0x63,0x8f,0x18,0xc0,0xa1,
  0xbe,0x7e,0xd3,0x30,0x76,0xf0,0xd6,0x88,0x77,0x4d,0x4a,0x29,0xbf,0x52,0x41,0x44,
  0xcb,0xb2,0x90,0xed,0xe0,0xed,0x1f,0xa5,0xdd,0x0f,0xa7,0xf2,0x58,0x08,0xb7,0x00,
  0x00,0x00,0x00,0x49,0x45,0x4e,0x44,0xae,0x42,0x60,0x82};

// Initialize the Ethernet server library
// with the IP address and port you want to use 
// (port 80 is default for HTTP):
EthernetServer server(80);

String getRequest;
char lineBuffer[100];

void setup()   {
  pinMode(lightOne, OUTPUT);
  pinMode(lightTwo, OUTPUT);
  pinMode(overrideSwitch, INPUT);
  pinMode(pilotLight, OUTPUT);
  pinMode(inverseLightThree, OUTPUT);
  pinMode(beedoBeedo, OUTPUT);
  Serial.begin(9600);
  Ethernet.begin(mac, ip);
  server.begin();
  digitalWrite(pilotLight, LOW);
  digitalWrite(inverseLightThree, HIGH);
  digitalWrite(beedoBeedo, LOW);

  wdt_enable(WDTO_8S); // have the wdt reset the chip
}

char * statusString() {
  char buffer[58] = "{\"result\":1,\"lamp1\":X,\"lamp2\":X,\"lamp3\":X,\"beedoBeedo\":X}";
  buffer[20] = 48+lightOneState;
  buffer[30] = 48+lightTwoState;
  buffer[40] = 48+inverseLightThreeState;
  buffer[55] = 48+beedoBeedoState;
  return buffer;
}

void report() {
  Serial.println(statusString());
  if (lightOneState == LOW && lightTwoState == LOW && inverseLightThreeState == LOW) {
    digitalWrite(pilotLight, HIGH);
  } 
  else {
    digitalWrite(pilotLight, LOW);
  }
}

void allOn() {
  digitalWrite(lightOne, HIGH);
  digitalWrite(lightTwo, HIGH);
  digitalWrite(inverseLightThree, LOW);
  digitalWrite(beedoBeedo, LOW);
  lightOneState = HIGH;
  lightTwoState = HIGH;
  inverseLightThreeState = LOW;
  beedoBeedoState = LOW;
}

void allOff() {
  digitalWrite(lightOne, LOW);
  digitalWrite(lightTwo, LOW);
  digitalWrite(inverseLightThree, HIGH);
  digitalWrite(beedoBeedo, LOW);
  lightOneState = LOW;
  lightTwoState = LOW;
  inverseLightThreeState = HIGH;
  beedoBeedoState = LOW;
}

void loop()                     
{
  if (Serial.available() > 0) {
    // read the incoming byte:
    incomingByte = Serial.read();
    if(incomingByte == 97){ // a
      digitalWrite(lightOne, HIGH);
      lightOneState = HIGH;
      report(); 
    }
    else if(incomingByte == 98){ // b
      digitalWrite(lightOne, LOW);
      lightOneState = LOW;
      report(); 
    }
    else if(incomingByte == 99){ // c
      digitalWrite(lightTwo, HIGH);
      lightTwoState = HIGH;
      report(); 
    }
    else if(incomingByte == 100){ // d
      digitalWrite(lightTwo, LOW);
      lightTwoState = LOW;
      report(); 
    }
    else if(incomingByte == 101){ // e
      digitalWrite(inverseLightThree, HIGH);
      inverseLightThreeState = HIGH;
      report(); 
    }
    else if(incomingByte == 102){ // f
      digitalWrite(inverseLightThree, LOW);
      inverseLightThreeState = LOW;
      report(); 
    }
    else if(incomingByte == 103){ // g
      digitalWrite(beedoBeedo, HIGH);
      beedoBeedoState = HIGH;
      report(); 
    }
    else if(incomingByte == 104){ // h
      digitalWrite(beedoBeedo, LOW);
      beedoBeedoState = LOW;
      report(); 
    }
    else if(incomingByte == 48){ // 0
      allOff();
      report(); 
    }
    else if(incomingByte == 49){ // 1
      allOn();
      report(); 
    }
    else if(incomingByte == 115){ // s
      report(); 
    }
    else if(incomingByte == 68){ // D - debug toggle
      debug = !debug;
      if (debug) {
        Serial.println("http debug on");
      } 
      else {
        Serial.println("http debug off");
      } 
    }
  }

  int override = digitalRead(overrideSwitch);
  if (override == HIGH) {
    if (lightOneState == LOW && lightTwoState == LOW && inverseLightThreeState == HIGH) {
      allOn();
    } 
    else {
      allOff();
    }
    report();
    while (override == HIGH) {
      delay(1);
      override = digitalRead(overrideSwitch);
    }
    delay(1);
  }

  listenForEthernetClients();
  wdt_reset(); // reset the wdt
}


// webserver endpoints
// / shows status
// /a turns lamp 1 on
// /b turns lamp 1 off
// /c turns lamp 2 on
// /d turns lamp 2 off
// /e turns lamp 3 relay high (lamp off)
// /f turns lamp 3 relay low (lamp on)
// /c turns flasher relay high (flasher on)
// /d turns flasher relay low (flasher off)
// each on/off command also returns status
// status returns according to the format
// "{\"result\":1,\"lamp1\":".$lamp1Status.",\"lamp2\":".$lamp2Status."}\r\n" 

void listenForEthernetClients() {
  EthernetClient client = server.available();
  if (client) {
    if (debug) {
      Serial.println("Got a client");
    }
    int iPos = 0;
    boolean gotGetRequest = false;
    boolean sentFavicon = false;
    // an http request ends with a blank line
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        lineBuffer[iPos] = c;
        iPos++;
        if (c == '\n') {
          lineBuffer[iPos] = 0;
          if (debug) {
            String ll = String("[") + iPos + String("]:");
            Serial.print(ll);
            Serial.print(lineBuffer);
          }
          if (!gotGetRequest) {
            if (iPos<6 && debug) {
              Serial.println("Invalid get request");
            } 
            else {
              getRequest = String(lineBuffer+5);
              gotGetRequest = true;
            } 
          }
          if (iPos<3) {
            if (gotGetRequest) {
              char request = getRequest[0];
              char request2 = getRequest[1];
              if (request == 'a') {
                // turn on L1
                digitalWrite(lightOne, HIGH);
                lightOneState = HIGH;
              }
              else if (request == 'b') {
                // turn off L1
                digitalWrite(lightOne, LOW);
                lightOneState = LOW;
              }
              else if (request == 'c') {
                // turn on L2
                digitalWrite(lightTwo, HIGH);
                lightTwoState = HIGH;
              }
              else if (request == 'd') {
                // turn off L2
                digitalWrite(lightTwo, LOW);
                lightTwoState = LOW;
              }
              else if (request == 'e') {
                // turn on L3
                digitalWrite(inverseLightThree, HIGH);
                inverseLightThreeState = HIGH;
              }
              else if (request == 'f') { // take /f but not /favicon
                if (request2 == 'a') {
                  // assume favicon
                  client.write(favicon,635);
                  sentFavicon = true;
                  if (debug) {
                    Serial.println("sent favicon");
                  }
                } 
                else {
                  // turn off L3
                  digitalWrite(inverseLightThree, LOW);
                  inverseLightThreeState = LOW;
                }
              }
              else if (request == 'g') {
                // turn on beedo beedo
                digitalWrite(beedoBeedo, HIGH);
                beedoBeedoState = HIGH;
              }
              else if (request == 'h') {
                // turn off beedo beedo
                digitalWrite(beedoBeedo, LOW);
                beedoBeedoState = LOW;
              }
              else if (request == '0') {
                allOff();
              }
              else if (request == '1') {
                allOn();
              }
            }
            // send a standard http response header
            if (!sentFavicon) {
              client.println("HTTP/1.0 200 OK");
              client.println("Content-Type: text/html");
              client.println();
              if (statusString()) {
                client.println(statusString());
              } 
              else {
                client.println("{result:0,error:\"could not form status string\"}");
              }
              if (debug) {
                Serial.print("wrote:");
                Serial.println(statusString());
              }
            }
            break;
          }
          iPos = 0;
        }
      }
    }
    if (debug) {
      Serial.println("client finished, waiting");
    }
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
    if (debug) {
      Serial.println("client disconnected at server");
    }
  }
}




